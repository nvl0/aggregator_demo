// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/repository/interface.go
//
// Generated by this command:
//
//	mockgen -destination=../internal/repository/mocks.go -package=repository -source=../internal/repository/interface.go
//

// Package repository is a generated GoMock package.
package repository

import (
	channel "aggregator/src/internal/entity/channel"
	session "aggregator/src/internal/entity/session"
	transaction "aggregator/src/internal/transaction"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChannel is a mock of Channel interface.
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *MockChannelMockRecorder
}

// MockChannelMockRecorder is the mock recorder for MockChannel.
type MockChannelMockRecorder struct {
	mock *MockChannel
}

// NewMockChannel creates a new mock instance.
func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &MockChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannel) EXPECT() *MockChannelMockRecorder {
	return m.recorder
}

// LoadChannelList mocks base method.
func (m *MockChannel) LoadChannelList(ts transaction.Session) ([]channel.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadChannelList", ts)
	ret0, _ := ret[0].([]channel.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadChannelList indicates an expected call of LoadChannelList.
func (mr *MockChannelMockRecorder) LoadChannelList(ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadChannelList", reflect.TypeOf((*MockChannel)(nil).LoadChannelList), ts)
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// LoadOnlineSessionList mocks base method.
func (m *MockSession) LoadOnlineSessionList(ts transaction.Session) ([]session.OnlineSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOnlineSessionList", ts)
	ret0, _ := ret[0].([]session.OnlineSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadOnlineSessionList indicates an expected call of LoadOnlineSessionList.
func (mr *MockSessionMockRecorder) LoadOnlineSessionList(ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOnlineSessionList", reflect.TypeOf((*MockSession)(nil).LoadOnlineSessionList), ts)
}

// SaveChunkList mocks base method.
func (m *MockSession) SaveChunkList(ts transaction.Session, chunkList []session.Chunk) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveChunkList", ts, chunkList)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveChunkList indicates an expected call of SaveChunkList.
func (mr *MockSessionMockRecorder) SaveChunkList(ts, chunkList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveChunkList", reflect.TypeOf((*MockSession)(nil).SaveChunkList), ts, chunkList)
}

// MockFlow is a mock of Flow interface.
type MockFlow struct {
	ctrl     *gomock.Controller
	recorder *MockFlowMockRecorder
}

// MockFlowMockRecorder is the mock recorder for MockFlow.
type MockFlowMockRecorder struct {
	mock *MockFlow
}

// NewMockFlow creates a new mock instance.
func NewMockFlow(ctrl *gomock.Controller) *MockFlow {
	mock := &MockFlow{ctrl: ctrl}
	mock.recorder = &MockFlowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlow) EXPECT() *MockFlowMockRecorder {
	return m.recorder
}

// MoveFlowToTempDir mocks base method.
func (m *MockFlow) MoveFlowToTempDir(dirName, fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveFlowToTempDir", dirName, fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveFlowToTempDir indicates an expected call of MoveFlowToTempDir.
func (mr *MockFlowMockRecorder) MoveFlowToTempDir(dirName, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFlowToTempDir", reflect.TypeOf((*MockFlow)(nil).MoveFlowToTempDir), dirName, fileName)
}

// ReadFileNamesInFlowDir mocks base method.
func (m *MockFlow) ReadFileNamesInFlowDir(dirName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFileNamesInFlowDir", dirName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFileNamesInFlowDir indicates an expected call of ReadFileNamesInFlowDir.
func (mr *MockFlowMockRecorder) ReadFileNamesInFlowDir(dirName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFileNamesInFlowDir", reflect.TypeOf((*MockFlow)(nil).ReadFileNamesInFlowDir), dirName)
}

// ReadFlow mocks base method.
func (m *MockFlow) ReadFlow(dirName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFlow", dirName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFlow indicates an expected call of ReadFlow.
func (mr *MockFlowMockRecorder) ReadFlow(dirName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFlow", reflect.TypeOf((*MockFlow)(nil).ReadFlow), dirName)
}

// ReadFlowDirNames mocks base method.
func (m *MockFlow) ReadFlowDirNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFlowDirNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFlowDirNames indicates an expected call of ReadFlowDirNames.
func (mr *MockFlowMockRecorder) ReadFlowDirNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFlowDirNames", reflect.TypeOf((*MockFlow)(nil).ReadFlowDirNames))
}
