// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/bridge/interface.go
//
// Generated by this command:
//
//	mockgen -destination=../internal/bridge/mocks.go -package=bridge -source=../internal/bridge/interface.go
//

// Package bridge is a generated GoMock package.
package bridge

import (
	global "aggregator/src/internal/entity/global"
	session "aggregator/src/internal/entity/session"
	traffic "aggregator/src/internal/entity/traffic"
	transaction "aggregator/src/internal/transaction"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFlow is a mock of Flow interface.
type MockFlow struct {
	ctrl     *gomock.Controller
	recorder *MockFlowMockRecorder
}

// MockFlowMockRecorder is the mock recorder for MockFlow.
type MockFlowMockRecorder struct {
	mock *MockFlow
}

// NewMockFlow creates a new mock instance.
func NewMockFlow(ctrl *gomock.Controller) *MockFlow {
	mock := &MockFlow{ctrl: ctrl}
	mock.recorder = &MockFlowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlow) EXPECT() *MockFlowMockRecorder {
	return m.recorder
}

// PrepareFlow mocks base method.
func (m *MockFlow) PrepareFlow(dirName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareFlow", dirName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareFlow indicates an expected call of PrepareFlow.
func (mr *MockFlowMockRecorder) PrepareFlow(dirName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareFlow", reflect.TypeOf((*MockFlow)(nil).PrepareFlow), dirName)
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// LoadOnlineSessionListByNasIP mocks base method.
func (m *MockSession) LoadOnlineSessionListByNasIP(ts transaction.Session) (map[string][]session.OnlineSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOnlineSessionListByNasIP", ts)
	ret0, _ := ret[0].(map[string][]session.OnlineSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadOnlineSessionListByNasIP indicates an expected call of LoadOnlineSessionListByNasIP.
func (mr *MockSessionMockRecorder) LoadOnlineSessionListByNasIP(ts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOnlineSessionListByNasIP", reflect.TypeOf((*MockSession)(nil).LoadOnlineSessionListByNasIP), ts)
}

// MockTraffic is a mock of Traffic interface.
type MockTraffic struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficMockRecorder
}

// MockTrafficMockRecorder is the mock recorder for MockTraffic.
type MockTrafficMockRecorder struct {
	mock *MockTraffic
}

// NewMockTraffic creates a new mock instance.
func NewMockTraffic(ctrl *gomock.Controller) *MockTraffic {
	mock := &MockTraffic{ctrl: ctrl}
	mock.recorder = &MockTrafficMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraffic) EXPECT() *MockTrafficMockRecorder {
	return m.recorder
}

// ParseFlow mocks base method.
func (m *MockTraffic) ParseFlow(flow string) (map[string]map[global.ChannelID]traffic.Traffic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseFlow", flow)
	ret0, _ := ret[0].(map[string]map[global.ChannelID]traffic.Traffic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseFlow indicates an expected call of ParseFlow.
func (mr *MockTrafficMockRecorder) ParseFlow(flow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseFlow", reflect.TypeOf((*MockTraffic)(nil).ParseFlow), flow)
}

// SiftTraffic mocks base method.
func (m *MockTraffic) SiftTraffic(trafficMap map[string]map[global.ChannelID]traffic.Traffic, sessionList []session.OnlineSession) ([]session.Chunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SiftTraffic", trafficMap, sessionList)
	ret0, _ := ret[0].([]session.Chunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SiftTraffic indicates an expected call of SiftTraffic.
func (mr *MockTrafficMockRecorder) SiftTraffic(trafficMap, sessionList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SiftTraffic", reflect.TypeOf((*MockTraffic)(nil).SiftTraffic), trafficMap, sessionList)
}
